library(rpart)
diabetesData <- read.csv(file="pima-indians-diabetes.csv",head=TRUE,sep=",")
summary(diabetesData)

for(i in 1:nrow(diabetesData)){
	if (diabetesData$glucose[i] >(mean(diabetesData$glucose)+2.5*sd(diabetesData$glucose))){
		diabetesData$glucose[i] = mean(diabetesData$glucose)
	}else if(diabetesData$glucose[i] <(mean(diabetesData$glucose)-2.5*sd(diabetesData$glucose))){
		diabetesData$glucose[i] = mean(diabetesData$glucose)		
	}
	if (diabetesData$pregnant[i] >(mean(diabetesData$pregnant)+2.5*sd(diabetesData$pregnant))){
		diabetesData$pregnant[i] = mean(diabetesData$pregnant)
	}else if(diabetesData$pregnant[i] <(mean(diabetesData$pregnant)-2.5*sd(diabetesData$pregnant))){
		diabetesData$pregnant[i] = mean(diabetesData$pregnant)		
	}
	if (diabetesData$bp[i] >(mean(diabetesData$bp)+2.5*sd(diabetesData$bp))){
		diabetesData$bp[i] = mean(diabetesData$bp)
	}else if(diabetesData$bp[i] <(mean(diabetesData$bp)-2.5*sd(diabetesData$bp))){
		diabetesData$bp[i] = mean(diabetesData$bp)		
	}
	if (diabetesData$tricep[i] >(mean(diabetesData$tricep)+2.5*sd(diabetesData$tricep))){
		diabetesData$tricep[i] = mean(diabetesData$tricep)
	}else if(diabetesData$tricep[i] <(mean(diabetesData$tricep)-2.5*sd(diabetesData$tricep))){
		diabetesData$tricep[i] = mean(diabetesData$tricep)		
	}
	if (diabetesData$insulin[i] >(mean(diabetesData$insulin)+2.5*sd(diabetesData$insulin))){
		diabetesData$insulin[i] = mean(diabetesData$insulin)
	}else if(diabetesData$insulin[i] <(mean(diabetesData$insulin)-2.5*sd(diabetesData$insulin))){
		diabetesData$insulin[i] = mean(diabetesData$insulin)		
	}
	if (diabetesData$bmi[i] >(mean(diabetesData$bmi)+2.5*sd(diabetesData$bmi))){
		diabetesData$bmi[i] = mean(diabetesData$bmi)
	}else if(diabetesData$bmi[i] <(mean(diabetesData$bmi)-2.5*sd(diabetesData$bmi))){
		diabetesData$bmi[i] = mean(diabetesData$bmi)		
	}
	if (diabetesData$dpf[i] >(mean(diabetesData$dpf)+2.5*sd(diabetesData$dpf))){
		diabetesData$dpf[i] = mean(diabetesData$dpf)
	}else if(diabetesData$dpf[i] <(mean(diabetesData$dpf)-2.5*sd(diabetesData$dpf))){
		diabetesData$dpf[i] = mean(diabetesData$dpf)		
	}
	if (diabetesData$age[i] >(mean(diabetesData$age)+2.5*sd(diabetesData$age))){
		diabetesData$age[i] = mean(diabetesData$age)
	}else if(diabetesData$age[i] <(mean(diabetesData$age)-2.5*sd(diabetesData$age))){
		diabetesData$age[i] = mean(diabetesData$age)		
	}
	
}

summary(diabetesData)

#Threshold on decrease in impurity using impurity function Information

fit_i <- rpart(class ~ pregnant+glucose+bp+tricep+insulin+bmi+dpf+age, method="class", data=diabetesData, control=(rpart.control(cp=0.01,minbucket=10)), parms=list(split='information'))
plot(fit_i, uniform=TRUE, main="Decision Tree 1(i) : Impurity Function - Information")
text(fit_i, use.n=TRUE, all=TRUE, cex=.8)

#Threshold on decrease in impurity using gini function Information

fit_g <- rpart(class ~ pregnant+glucose+bp+tricep+insulin+bmi+dpf+age, method="class", data=diabetesData, control=(rpart.control(cp=0.01,minbucket=10)), parms=list(split='gini'))
plot(fit_g, uniform=TRUE, main="Decision Tree 1(i) : Impurity Function - Gini")
text(fit_g, use.n=TRUE, all=TRUE, cex=.8)

#Threshold on decrease in impurity using entropy function Information

fit_e <- rpart(class ~ pregnant+glucose+bp+tricep+insulin+bmi+dpf+age, method="class", data=diabetesData, control=(rpart.control(cp=0.01,minbucket=10)), parms=list(split='entropy'))
plot(fit_e, uniform=TRUE, main="Decision Tree 1(i) : Impurity Function - Entropy")
text(fit_e, use.n=TRUE, all=TRUE, cex=.8)

library(caret)

cv <- trainControl("cv",5)
rpart.grid <- expand.grid(.cp=fit_i$cptable[which.min(fit_i$cptable[,"xerror"]),"CP"])
(train.rpart <- train(class ~., data=diabetesData, method="rpart",trControl=cv,tuneGrid=rpart.grid))

pfit_i <- prune(fit_i, cp = fit_i$cptable[which.min(fit_i$cptable[,"xerror"]),"CP"]) 
plot(pfit_i, uniform=TRUE, main="Information impurity function after pruning")
text(pfit_i, use.n=TRUE, all=TRUE, cex=.8)

printcp(pfit_i) 
plotcp(pfit_i)

cv <- trainControl("cv",5)
rpart.grid <- expand.grid(.cp=fit_g$cptable[which.min(fit_g$cptable[,"xerror"]),"CP"])
(train.rpart <- train(class ~., data=diabetesData, method="rpart",trControl=cv,tuneGrid=rpart.grid))

pfit_g <- prune(fit_g, cp = fit_g$cptable[which.min(fit_g$cptable[,"xerror"]),"CP"]) 
plot(pfit_g, uniform=TRUE, main="Gini impurity function after pruning")
text(pfit_g, use.n=TRUE, all=TRUE, cex=.8)

printcp(pfit_g) 
plotcp(pfit_g)


cv <- trainControl("cv",5)
rpart.grid <- expand.grid(.cp=fit_e$cptable[which.min(fit_e$cptable[,"xerror"]),"CP"])
(train.rpart <- train(class ~., data=diabetesData, method="rpart",trControl=cv,tuneGrid=rpart.grid))

pfit_e <- prune(fit_e, cp = fit_e$cptable[which.min(fit_e$cptable[,"xerror"]),"CP"]) 
plot(pfit_e, uniform=TRUE, main="Entropy impurity function after pruning")
text(pfit_e, use.n=TRUE, all=TRUE, cex=.8)

printcp(pfit_e) 
plotcp(pfit_e)

